{"name":"Minisearchengine","tagline":"mini search engine","body":"MiniSearchEngine\r\n================\r\n\r\n\r\n## Brief Introduction ##\r\n---\r\n### 1. Description ###\r\n\r\n搜索引擎迷你项目，将网页/文本数据建库，去重，计算相似度生成检索资源；编写Linux守护进程以支持前台页面的查询请求。\r\n\r\n项目关键词：**分词**、**余弦相似度**、**VSM**、**倒排索引**、**守护进程**、**网络编程**等\r\n\r\n### 2. Develop Environment ###\r\n\r\n+ Ubuntu 12.04\r\n\r\n+ g++ 4.6.3\r\n\r\n+ python 3.3.2\r\n\r\n### 3. Directory Arch ###\r\n\r\n<p>\r\nMiniSearchEngine<br>\r\n├ bin<br>\r\n├ data<br>\r\n│&nbsp;&nbsp;&nbsp;&nbsp;├ Raw_Data<br>\r\n│&nbsp;&nbsp;&nbsp;&nbsp;├ ripepage.lib<br>\r\n│&nbsp;&nbsp;&nbsp;&nbsp;├ query.lib<br>\r\n│&nbsp;&nbsp;&nbsp;&nbsp;└ index.lib<br>\r\n├ include<br>\r\n├ lib<br>\r\n│&nbsp;&nbsp;&nbsp;&nbsp;├ libcode.a<br>\r\n│&nbsp;&nbsp;&nbsp;&nbsp;└ libelus.a<br>\r\n├ log<br>\r\n├ src<br>\r\n│&nbsp;&nbsp;&nbsp;&nbsp;└ stopwordlist.txt<br>\r\n├ search_engine.conf<br>\r\n└ Makefile<br>\r\n</p>\r\n\r\n\r\n### 4. Module\u0007 ###\r\n\r\n#### index.lib ####\r\n从ripepage.lib中读取query word的偏移位置，存储在index.lib文件中，格式如下：\r\n\t\r\n\tqueryword1 \\t offset1\r\n\tqueryword2 \\t offset2\r\n\t…\r\n\t\r\n\r\n#### WordSegement ####\r\n\r\n调用分词库libcode.a libelus.a进行分词。\r\n\r\n分词原理的学习附在Reference部分。\r\n\r\n#### Delete Duplicate ####\r\n\r\n1. 指纹法去重\r\n\r\n\t特征码：该网页/文本中词频最高的10个词；\r\n\t判重算法：对于每两篇，比较topword10的交集，如果交集大于6个，则认为是互为重复的网页。\r\n\r\n2. 特征码去重\r\n\r\n\t特征码：提取该网页/文本中每个逗号前后的5个字节，将这些字符串顺序连接成一个特征字符串S。\r\n\t判重算法：对于两篇网页/文本，计算S1和S2的LCS，如果len(LCS)/min(len(S1), len(S2)) > 0.6则判定为重复。\r\n\r\n去重后生成一个全词集合文本，格式如下：\r\n\r\n\tword1 \\t docid_i \\t offset_i \\t docid_k \\t offset_k \\t …\r\n\tword2 \\t docid_j \\t offset_j \\t …\r\n\t…\r\n\t\r\n\r\n\r\n#### Calculate Similarity ####\r\n\r\n网页/文本相似度计算基于VSM与余弦相似度，本项目中采用简化模型“tf-idf”。\r\n\r\nVSM、余弦相似度的相关资料附在Reference部分。\r\n\r\n#### Query Process ####\r\nLinux 守护进程，实现cache\r\n\r\n#### Front End ####\r\n使用PHP编写的前端网页\r\n\r\n\r\n##Project Time Schedule ##\r\n---\r\nLUD = last update date\r\n\r\n  N   |    LUD   |   Project Phase     |              Description\r\n:-----|:---------|:--------------------|:-------------------------------------------\r\n 01   | 20130809 | PreProcess          |\r\n 02   | 20130809 | DelDuplicate        |\r\n 03   | 20130812 | CalcSimilarity      |\r\n 04   | -        | QueryFrontEnd       |\r\n 05   | -        | WebPage             |\r\n  \r\n\r\n### 1. PreProcess / Build Data Library File & Index ###\r\n\r\n\r\n  N   |    LUD   |    V   |             code file           |          Description       \r\n:----:|:---------|:-------|:--------------------------------|:-----------------------------\r\n 001  | 20130722 | 0.1    | getfileinfo.py         | add:读取文件、解析内容方法\r\n 002  | 20130722 | 0.1    | ripepage.py            | add:生成抓取结果库文件\r\n 003  | 20130730 | 0.1    | queryindex.py          | add:生成关键词索引文件\r\n 004  | 20130809 | 0.2    | getfileinfo.py         | fix:解析方式，以空格替换任意空白符\r\n 005  | 20130809 | 0.2    | ripepage.py            | fix:不输出读取失败的文件、模拟重复\r\n\r\n\r\n\r\n### 2. DelDuplicate & Build Query Keywords File ###\r\n\r\n\r\n  N   |    LUD   |    V   |             code file           |          Description       \r\n:----:|:---------|:-------|:--------------------------------|:-----------------------------\r\n 001  | 20130805 | 0.1    | Document.h                      | add:定义Document类\r\n 002  | 20130805 | 0.1    | Document.cpp                    |\r\n 003  | 20130805 | 0.1    | DocumentKits.h                  | add:读取正文、载入文件、转换编码函数\r\n 004  | 20130805 | 0.1    | DocumentKits.cpp                |\r\n 005  | 20130805 | 0.1    | QueryDemo.cpp                   | add:查询测试模块\r\n 005  | 20130806 | 0.2    | Document.h                      | fix:以重载关系操作符代替比较函数\r\n 006  | 20130806 | 0.2    | Document.cpp                    |\r\n 007  | 20130806 | 0.2    | DocumentKits.h                  | add:分词、去重函数\r\n 008  | 20130806 | 0.2    | DocumentKits.cpp                |\r\n 009  | 20130808 | 0.3    | DocumentKits.h                  | update:封装为类\r\n 010  | 20130808 | 0.3    | DocumentKits.cpp                |\r\n 001  | 20130808 | 0.2    | QueryDemo.cpp                   | update:\r\n 011  | 20130809 | 0.4    | DocumentKits.h                  | add:生成查询词库方法\r\n 012  | 20130809 | 0.4    | DocumentKits.cpp                |\r\n 013  | 20130809 | 0.3    | QueryDemo.cpp                   |\r\n\r\n### 3. CalcSimilarity ###\r\n\r\n\r\n  N   |    LUD   |    V   |             code file           |          Description       \r\n:----:|:---------|:-------|:--------------------------------|:-----------------------------\r\n 001  | 20130812 | 0.5    | DocumentKits.h                  | add:初始化文档向量、计算相似度方法\r\n 002  | 20130812 | 0.5    | DocumentKits.cpp                |\r\n 003  | 20130812 | 0.4    | QueryDemo.cpp                   | update:测试计算相似度\r\n\r\n\r\n### 4. Query Process ###\r\n\r\n\r\n\r\n### 5. QueryFrontEnd ###\r\n\r\n  N   |    LUD   |    V   |             code file           |          Description       \r\n:----:|:---------|:-------|:--------------------------------|:-----------------------------\r\n- |\r\n\r\n\r\n\r\n## Issue ##\r\n---\r\n1. 读取数据文件编码问题\r\n\r\n\r\n2. 读取文件标签匹配问题\r\n\r\n\r\n3. 标题多于一行\r\n\r\n\r\n4. 文章空白符、换行符处理方式\r\n\r\n\r\n5. 生成文件索引的字节位置在query标签前\r\n\r\n\r\n6. 取top10 受排序影响，同词频的词导致不同的top10，并影响结果\r\n\r\n\r\n7. c++容器变量空间，堆／栈\r\n\r\n\r\n8. c++ STL map<key, value>按value排序\r\n\r\n\r\n9. 内存优化\r\n\r\n\r\n10. 多线程优化\r\n\r\n\r\n## Q & A ##\r\n---\r\n\r\n\r\n\r\n\r\n\r\n## Some Comment ##\r\n---\r\n1. 设计模式 单例模式etc\r\n\r\n2. rebuild 重构概念\r\n\r\n3. 缓存cache\r\n\r\n---\r\n## Reference ##\r\n\r\n1. 分词原理\r\n2. VSM\r\n3. 余弦相似度\r\n4. 文本聚类\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}